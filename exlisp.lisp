#! /usr/bin/sbcl --script
;;
;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;    https://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;

;; Load .sbclrc which is suppressed for --script
;; mainly to include Quicklisp
(eval-when (:load-toplevel :compile-toplevel :execute)
  (let ((sbclrc (merge-pathnames ".sbclrc"
				 (user-homedir-pathname))))
    (when (probe-file sbclrc)
      (load sbclrc))))

;; Load modules that should be available to all scripts
(eval-when (:load-toplevel :compile-toplevel :execute)
  (ql:quickload (append
		 '(:alexandria
		   ;; ADD MORE LIBRARIES HERE IF YOU WANT
		   :eric
		   :shell
		   :split-sequence)
		 (read-from-string (or (uiop:getenv "EXLISP_LIBS") "()")))))

(use-package '(:shell
	       :split-sequence))

(defun help ()
  (format t "This was generated by ~a and is meant to be used in #! lines for lisp programs that should have useful libraries included.~%"
	  (first *posix-argv*)))

;; Kind of hacky.
;; Apache's mod_cgi seems to use an interactive stdin, so it breaks shell script execution
;; detection. There must be a correct way to do it; Python gets it right.
;; Until then, however, this detects that it's running as a CGI script and overrides.
(defun cgi-p ()
  (and (search "Apache" (or (uiop:getenv "SERVER_SOFTWARE") ""))
       (uiop:getenv "REQUEST_METHOD")))

(defun calling-script-p (argv)
  (or (cgi-p)
      (and (interactive-stream-p *standard-input*)
	   (> (length argv) 1))))

(defun insert-flag (argv flag)
  (append (list (first argv) flag) (rest argv)))

(defun silent-repl-prompt (stream)
  (fresh-line stream))

(defmacro run-config (script-or-interactive argv)
  `(let* ((sb-ext:*posix-argv* (insert-flag ,argv
					    ,(ecase script-or-interactive
					       (:script "--script")
					       (:interactive "--noinform"))))
	  ,@(if (eq script-or-interactive :script)
		`((shell:*script-filename* (third sb-ext:*posix-argv*))))
	  ,@(if (eq script-or-interactive :interactive)
		`((sb-impl::*repl-prompt-fun* #'silent-repl-prompt))))
     (sb-impl::toplevel-init)))


(defun run-script (argv)
  (run-config :script argv))

(defun run-interactive (argv)
  (run-config :interactive argv))

(defun handle-argv (argv)
  (values (calling-script-p argv)
	  nil
	  argv))

(defun toplevel-init ()
  (let ((argv (copy-list *posix-argv*)))
    (multiple-value-bind (script-p no-rl other-args) (handle-argv argv)
      (declare (ignore no-rl))
      (if script-p
	(run-script other-args)
	(run-interactive other-args)))))

(save-lisp-and-die "exlisp" :executable t :toplevel 'toplevel-init)
